
DEV:
USE ROLE ACCOUNTADMIN
CREATE DATABASE IF NOT EXISTS project_DEV;

USE ROLE SYSADMIN;
-- DEDICATED WAREHOSE FOR DBT TRANSFORMATIONS
CREATE WAREHOUSE IF NOT EXISTS project_DEV_WH;
ALTER WAREHOUSE "project_DEV_WH" SET
    WAREHOUSE_SIZE = 'XSMALL'
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE
    COMMENT = 'Default Warehouse';

CREATE ROLE IF NOT EXISTS project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
--- READ ACCESS
GRANT IMPORTED PRIVILEGES ON DATABASE SOURCE_DB TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT USAGE ON SCHEMA SOURCE_DB.LANDING_SCHEMA TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA SOURCE_DB.LANDING_SCHEMA TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
---- WRITE ACCESS
GRANT USAGE ON DATABASE project_DEV TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT REFERENCE_USAGE ON DATABASE project_DEV TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT MODIFY ON DATABASE project_DEV TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT MONITOR ON DATABASE project_DEV TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT CREATE SCHEMA ON DATABASE project_DEV TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
--- WH PERMISSIONS
GRANT OPERATE ON WAREHOUSE project_DEV_WH TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
GRANT USAGE ON WAREHOUSE project_DEV_WH TO ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE;
  
Developer Role: GRANT THE SA-DEV ROLE TO EACH DEVELOPER BUT RESTRICT SA-TEST, SA-PROD MAPPING TO ANY DEVELOPER
SA Role: project_DBT_DEV_SERVICE_ACCOUNT_ROLE
SA User: project_DBT_DEV_SERVICE_ACCOUNT_USER
database: project_DEV
schema: gold
warehouse: project_DEV_WH

CREATE USER project_DBT_DEV_SERVICE_ACCOUNT_USER
  PASSWORD = 'PPPP'
  COMMENT = 'SERVICE ACCOUNT ROLE FOR DBT IN THE PRODUCTION ENVIRONMENT FOR XXXX PROJECT'
  DEFAULT_WAREHOUSE = project_DEV_WH
  DEFAULT_ROLE = project_DBT_DEV_SERVICE_ACCOUNT_ROLE
  MUST_CHANGE_PASSWORD = FALSE;

GRANT ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE TO USER project_DBT_DEV_SERVICE_ACCOUNT_USER
GRANT ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE TO USER SKHANNA;

-----------------------------------

SHOW ROLES;
SHOW GRANTS TO ROLE <role_name>;

USE ROLE ACCOUNTADMIN;
CREATE ROLE project_DBT_DEV_SERVICE_ACCOUNT_ROLE
COMMENT = 'Role for the users running DBT models';
GRANT ROLE DBT_EXECUTOR_ROLE TO USER <your_user>;
GRANT ROLE DBT_EXECUTOR_ROLE TO USER DBT_EXECUTOR;


USE ROLE SYSADMIN;
GRANT CREATE DATABASE ON ACCOUNT TO ROLE DBT_EXECUTOR_ROLE;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE DBT_EXECUTOR_ROLE;

USE ROLE DBT_EXECUTOR_ROLE;
CREATE DATABASE DATA_ENG_DBT;

-- To reduce Snowflake credit consumption, letâ€™s finish by configuring the default warehouse 
-- to suspend after 1 minute instead of 10:
USE ROLE SYSADMIN;
ALTER WAREHOUSE "COMPUTE_WH" SET
    WAREHOUSE_SIZE = 'XSMALL'
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE
    COMMENT = 'Default Warehouse';

USE ROLE USERADMIN;
CREATE USER IF NOT EXISTS DBT_EXECUTOR
COMMENT = 'User running DBT commands'
PASSWORD = 'pick_a_password'
DEFAULT_WAREHOUSE = 'COMPUTE_WH'
DEFAULT_ROLE = 'DBT_EXECUTOR_ROLE';

GRANT ROLE DBT_EXECUTOR_ROLE TO USER DBT_EXECUTOR;
USE ROLE DBT_EXECUTOR_ROLE;
  
  
  
  
  
  
  
  PROD:
Developer Role: project_dbt_executor_DEVELOPER
SA Role: project_DBT_PROD_SERVICE_ACCOUNT_ROLE
database: project_PROD
warehouse: project_PROD_WH



DECLARE sql_query STRING;
DECLARE result ARRAY;

BEGIN
    -- Initialize an empty array to store results
    LET result = ARRAY_CONSTRUCT();

    -- Loop through each column in the target table
    FOR col IN (
        SELECT COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = 'your_table_name'
    )
    DO
        -- Dynamically construct and execute the query to calculate the minimum value
        LET sql_query = 'SELECT MIN(' || col.COLUMN_NAME || ') AS min_value FROM your_table_name';
        LET min_value = (EXECUTE IMMEDIATE :sql_query);
        
        -- Append the result to the array
        LET result = ARRAY_APPEND(result, OBJECT_CONSTRUCT('COLUMN_NAME', col.COLUMN_NAME, 'MIN_VALUE', min_value));
    END FOR;

    -- Return the results as a table
    RETURN TABLE(FLATTEN(INPUT => :result));
END;
